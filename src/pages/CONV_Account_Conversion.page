<apex:page controller="CONV_Account_Conversion_CTRL" title="Account Model Conversion Utility" tabStyle="npo02__Household__c" showHeader="true" sidebar="false" action="{!runCheck}">
    <apex:includeScript value="{!URLFOR($Resource.CumulusStaticResources, '/jquery/jquery-1.10.2.min.js')}"/>
    <apex:stylesheet value="{!URLFOR($Resource.SLDS, 'assets/styles/salesforce-lightning-design-system-vf.css')}"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- @todo -->
    <!--
        <apex:pageMessages />
    -->

    <div class="slds" id="all_content">

        <div class="slds-page-header slds-m-bottom--large" role="banner">
            <div class="slds-media slds-media--center slds-media--responsive">
                <div class="slds-media__body">
                    <h3 class="slds-text-heading--medium slds-m-bottom--large">{!$Label.CONV_Page_Title}</h3>
                    <p>{!$Label.CONV_Page_Description}</p>
                </div>
                <div class="slds-media__figure slds-media__figure--reverse">
                    <img src="{!URLFOR($Resource.CumulusStaticResources, '/Images/NPSP_Logo_Small_Cropped.png')}" class="img-rounded img-responsive" style="height: 75px" alt="NPSP Logo"/>
                </div>
            </div>
        </div>

        <div id="warning_content">
            <div class="slds-grid slds-m-bottom--large">
                <div class="slds-col slds-size--1-of-2 slds-box slds-m-right--medium">
                    <h3 class="slds-text-heading--small slds-m-bottom--medium">
                        {!$Label.CONV_Important_Info_Header}
                    </h3>

                    <p class="slds-m-bottom--large">
                        {!$Label.CONV_Permanent_Change}
                    </p>

                    <div>
                        <form>
                            <div class="slds-form-element">
                                <label class="slds-checkbox" for="check-users-logged-out">
                                    <input name="checkbox" type="checkbox" id="check-users-logged-out" />
                                    <span class="slds-checkbox--faux"></span>
                                    <span class="slds-form-element__label">{!$Label.CONV_All_Users_Logged_Out}</span>
                                </label>
                            </div>

                            <div class="slds-form-element">
                                <label class="slds-checkbox" for="check-data-backedup">
                                    <input name="checkbox" type="checkbox" id="check-data-backedup" />
                                    <span class="slds-checkbox--faux"></span>
                                    <span class="slds-form-element__label">{!$Label.CONV_All_Backed_Up}</span>
                                </label>
                            </div>

                            <div class="slds-form-element">
                                <label class="slds-checkbox" for="check-sandbox-first">
                                    <input name="checkbox" type="checkbox" id="check-sandbox-first" />
                                    <span class="slds-checkbox--faux"></span>
                                    <span class="slds-form-element__label">{!$Label.CONV_Tested_in_Sandbox}</span>
                                </label>
                            </div>

                            <div class="slds-form-element">
                                <label class="slds-checkbox" for="check-inactiveuser">
                                    <input name="checkbox" type="checkbox" id="check-inactiveuser" />
                                    <span class="slds-checkbox--faux"></span>
                                    <span class="slds-form-element__label">{!$Label.CONV_Record_Ownership_Transferred}</span>
                                </label>
                            </div>

                            <div class="slds-form-element">
                                <label class="slds-checkbox" for="check-wf-validation">
                                    <input name="checkbox" type="checkbox" id="check-wf-validation" />
                                    <span class="slds-checkbox--faux"></span>
                                    <span class="slds-form-element__label">{!$Label.CONV_All_WFR_Disabled}</span>
                                </label>
                            </div>

                            <div class="slds-form-element">
                                <label class="slds-checkbox" for="check-required-fields">
                                    <input name="checkbox" type="checkbox" id="check-required-fields" />
                                    <span class="slds-checkbox--faux"></span>
                                    <span class="slds-form-element__label">{!$Label.CONV_All_Required_Removed}</span>
                                </label>
                            </div>

                            <div class="slds-form-element">
                                <label class="slds-checkbox" for="check-households">
                                    <input name="checkbox" type="checkbox" id="check-households" />
                                    <span class="slds-checkbox--faux"></span>
                                    <span class="slds-form-element__label">{!$Label.CONV_Only_Household_Contacts}</span>
                                </label>
                            </div>

                            <div class="slds-form-element">
                                <label class="slds-checkbox" for="check-apps">
                                    <input name="checkbox" type="checkbox" id="check-apps" />
                                    <span class="slds-checkbox--faux"></span>
                                    <span class="slds-form-element__label">{!$Label.CONV_Non_NPSP_Apps}</span>
                                </label>
                            </div>

                            <div class="slds-form-element">
                                <label class="slds-checkbox" for="check-consult">
                                    <input name="checkbox" type="checkbox" id="check-consult" />
                                    <span class="slds-checkbox--faux"></span>
                                    <span class="slds-form-element__label">{!$Label.CONV_Local_Expert}</span>
                                </label>
                            </div>

                            <div class="slds-form-element">
                                <label class="slds-checkbox" for="check-risk">
                                    <input name="checkbox" type="checkbox" id="check-risk" />
                                    <span class="slds-checkbox--faux"></span>
                                    <span class="slds-form-element__label">{!$Label.CONV_Accept_Risk}</span>
                                </label>
                            </div>

                        </form>
                    </div>
                </div>

                <div class="slds-col slds-size--1-of-2 slds-box slds-m-left--medium">
                    <h3 class="slds-text-heading--small slds-m-bottom--medium">
                        {!$Label.CONV_What_This_Tool_Does}
                    </h3>

                    <p class="slds-m-bottom--large">
                        {!$Label.CONV_Batching_Explanation}
                    </p>

                    <ul class="slds-list--dotted">
                        <li>{!$Label.CONV_All_Triggers_Disabled}</li>
                        <li>{!$Label.CONV_All_Households_Selected}</li>
                        <li>{!$Label.CONV_New_Households_Created}</li>
                        <li>{!$Label.CONV_Old_Household_Objects}</li>
                        <li>{!$Label.CONV_New_Affiliations}</li>
                        <li>{!$Label.CONV_Contacts_Attached}</li>
                        <li>{!$Label.CONV_Opportunities_Reparented}</li>
                        <li>{!$Label.CONV_Activities_Reparented}</li>
                        <li>{!$Label.CONV_Addresses_Mapped}</li>
                        <li>{!$Label.CONV_Master_Address_Set}</li>
                        <li>{!$Label.CONV_Address_Overrides_Set}</li>
                        <li>{!$Label.CONV_Primary_Contacts_Set}</li>
                        <li><apex:outputText value="{!$Label.CONV_Triggers_Reenabled}" escape="false"/></li>
                    </ul>
                </div>
            </div>

            <div class="slds-grid slds-m-bottom--large">
                <div class="slds-col slds-size--1-of-1 slds-box">
                    <h3 class="slds-text-heading--small slds-m-bottom--medium">
                        {!$Label.CONV_Configuration_Options}
                    </h3>

                    <p class="slds-m-bottom--medium">
                        {!$Label.CONV_Original_HH_Id}
                    </p>

                    <apex:form >
                        <div class="slds-form-element">
                            <label class="slds-form-element__label" for="HHId">
                                {!$Label.CONV_Account_Field}
                            </label>
                            <div class="slds-form-element__control">
                                <div class="slds-select_container">
                                    <apex:selectList id="HHId" styleClass="slds-select" onchange="verifyHHIdField();" title="{!$Label.CONV_Account_Field_For_Old_HH_ID}" value="{!accountHouseholdIdField}" multiselect="false" size="1">
                                        <apex:selectOptions value="{!targetAccountFields}" />
                                    </apex:selectList>
                                </div>
                            </div>
                        </div>

                        <div class="slds-form-element slds-m-top--large">
                            <button type="button" class="slds-button slds-button--brand" data-toggle="modal" data-target="warning_modal" id="conversionBTN">
                                {!$Label.CONV_Begin}
                            </button>
                        </div>
                    </apex:form>
                </div>
            </div>
        </div>

        <apex:form >
            <apex:actionFunction name="runconvert" action="{!convert}" oncomplete="renderResults()"/>
        </apex:form>

        <apex:outputPanel id="batchpanel">
            <c:UTIL_JobProgressLightning id="jobProgress" eventTargetId="{!$Component.jobProgress}" strBatchComponentLabel="{!$Label.CONV_Conversion_Process}" cNumberOfJobs="1" startPolling="True" stopPollingOnComplete="True"/>
        </apex:outputPanel>

    </div><!-- close class slds-->

    <div class="slds">
        <div id="warning_modal" tabindex="-1" aria-hidden="true" aria-labelledby="warning_modal_heading" role="dialog" class="slds-modal">
            <div class="slds-modal__container">
                <div class="slds-modal__header">
                    <h2 id="warning_modal_heading" class="slds-text-heading--medium">{!$Label.CONV_Warning}</h2>
                    <button class="slds-button slds-button--icon-inverse slds-modal__close" data-dismiss="modal" data-target="warning_modal">
                        Close
                    </button>
                </div>
                <div class="slds-modal__content">
                    <p>
                        {!$Label.CONV_Fundamental_Changes}
                    </p>
                </div>
                <div class="slds-modal__footer">
                    <div class="slds-x-small-buttons--horizontal">
                        <button class="slds-button slds-button--neutral" data-dismiss="modal" data-target="warning_modal">{!$Label.CONV_Cancel}</button>
                        <button class="slds-button slds-button--neutral slds-button--brand" data-dismiss="modal" data-target="warning_modal">{!$Label.CONV_Proceed}</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="slds-backdrop" tabindex="-1"></div>
    </div>

    <script type="text/javascript">

    // @todo -- extract modal code to external library
    (function () {
        var addClass = function(el, class_) {
            var currentClass = el.getAttribute('class') || '';
            el.setAttribute(
                'class',
                class_ + ' ' + currentClass
            );
        };

        var removeClass = function(el, class_) {
            var currentClass = el.getAttribute('class') || '';
            var regex = new RegExp(
                '(^|\\b)' + class_.split(' ').join('|') + '(\\b|$)',
                'gi'
            );
            el.setAttribute(
                'class',
                currentClass.replace(regex, ' ')
            );
        };

        var elementMatches = function(el, selector) {
            var m = el.matches || el.matchesSelector || el.msMatchesSelector;
            return m.call(el, selector);
        };

        var currentModalId;
        var lastFocusedElement;

        var openModal = function(modalId) {
            var modalElement = document.getElementById(modalId);

            // if the target modal element doesn't exist, bail out
            if (!modalElement) return;

            // close any currently open modal dialogs before opening this one
            if (currentModalId) {
                if (currentModalId === modalId) return;
                closeModal(currentModalId);
            }

            // set this modal as the currently open modal
            currentModalId = modalId;

            // find the modal's backdrop and make it visible
            var backdropElement = modalElement.parentElement.querySelector('.slds-backdrop');
            if (backdropElement) {
                addClass(backdropElement, 'slds-backdrop--open');
            }

            // make the modal visible
            addClass(modalElement, 'slds-fade-in-open');

            // switch focus to the modal
            modalElement.focus();

            // set the modal visible to accessability tools
            modalElement.setAttribute('aria-hidden', false);

            // hide all elements in the "background" of the modal
            Array.prototype.forEach.call(
                document.querySelectorAll('.hide-when-modal-open'),
                function (el) {
                    el.setAttribute('aria-hidden', 'true');
                }
            );
        }

        var closeModal = function(modalId) {
            var modalElement = document.getElementById(modalId);

            // if the target modal element doesn't exist, bail out
            if (!modalElement) return;

            // show all elements that were previously hidden in the "background" of the modal
            Array.prototype.forEach.call(
                document.querySelectorAll('.hide-when-modal-open'),
                function (el) {
                    el.setAttribute('aria-hidden', 'false');
                }
            );

            // restore focus to the last used element before the modal was opened
            if (lastFocusedElement) {
                lastFocusedElement.focus();
            }

            // hide the modal dialog
            removeClass(modalElement, 'slds-fade-in-open');

            // set the modal invisible to accessability tools
            modalElement.setAttribute('aria-hidden', true);

            // find the modal's backdrop and hide it
            var backdropElement = modalElement.parentElement.querySelector('.slds-backdrop');
            if (backdropElement) {
                removeClass(backdropElement, 'slds-backdrop--open');
            }

            // we've closed this modal so there should not be a current modal
            currentModalId = '';
        }

        document.addEventListener('click', function (event) {
            if (event.defaultPrevented) return;

            var el = event.target;

            if (elementMatches(el, 'a')) {
                event.preventDefault();
            }

            if (elementMatches(el, '[data-toggle="modal"]')) {
                var modalId = el.getAttribute('data-target') || '';
                if (!modalId) return;
                lastFocusedElement = el;
                openModal(modalId);
            }

            if (elementMatches(el, '[data-dismiss="modal"]')) {
                var modalId = el.getAttribute('data-target') || '';
                if (!modalId) return;
                closeModal(modalId);
            }
        }, false);

        document.addEventListener('keyup', function (event) {
            if (!currentModalId) return;

            if (event.keyCode === 27) {
                closeModal(currentModalId);
            }
        }, true);

        document.addEventListener('blur', function (event) {
            if (!currentModalId) return;

            var modalElement = document.getElementById(currentModalId);

            if (modalElement && !modalElement.contains(event.relatedTarget)) {
                event.preventDefault();
                event.stopPropagation();
                modalElement.focus();
            }
        }, true);
    })();

    var jobProgressComponent = document.getElementById('{!$Component.jobProgress}');

    if (jobProgressComponent) {
        jobProgressComponent.addEventListener('complete', function (e) {
            // @todo -- react to all jobs being completed
            console.log('in complete listener');
            console.log(e.detail);
        });
    }

    var j$ = jQuery.noConflict();

    function renderResults() {
        console.log('in renderResults');
    }

    j$(document).ready(function(){
        // @debug Don't disable because it's annoying to check all those boxes
        //j$('#conversionBTN').attr('disabled', 'disabled');

        j$("input[type='checkbox']").click(function() {
            if (j$("input[type='checkbox']:checked").length == j$("input[type='checkbox']").length && !{!runCheckErrorState})
                j$('#conversionBTN').removeAttr('disabled');
            // @debug Don't disable because it's annoying to check all those boxes
            //else
            //j$('#conversionBTN').attr('disabled', 'disabled');
        });

        /*
        j$("#warning_modal_proceed_button").on("click", function() {
            // @todo add proper handler to proceed button
            callConversion();
        });
        */
    });

    function callConversion(){
        // @todo -- use visualforce remoting instead of actionFunction
        runconvert();
    }

    function verifyHHIdField(){
        var selectedField = j$("[name$='HHId']").val();
        if (selectedField != ''){
            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.CONV_Account_Conversion_CTRL.verifyFieldTypeForIds}',selectedField,function(result, event){
                if(event.status){
                    if (!result){
                        alert("{!$Label.CONV_Selected_Field_Bad}");
                        j$("[name$='HHId']").val('-None-');
                    }
                }
                else{
                    alert("{!$Label.CONV_Selected_Field_Verification_Failure}");
                }
            });
        }
    }
    </script>
</apex:page>